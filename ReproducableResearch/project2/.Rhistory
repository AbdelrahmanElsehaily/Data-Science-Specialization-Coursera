abline(v=mean(sample_means),col="blue",lwd=3)
print(paste("Sample Mean: ",mean(sample_means)))
print(paste("Therortical Mean: ",1/lambda))
print(paste("Theoretical Variance: ",1/lambda))
print(paste("sample Variance from our simulation: ",sd(sample_means)))
print (paste("sample varience from CLT: ",(1/lambda/sqrt(40))))
hist(rexp(1000,rate=lambda),breaks = 50,col = "blue",xlab = "Value",freq = F,main="The distribution of the the random exponentials (population)")
hist(sample_means,breaks = 20,col = "blue",xlab = "Samples Mean",main="Distribution of samples means",freq=F)
curve(dnorm(x, mean=mean(sample_means), sd=sd(sample_means)), add=TRUE, col="red", lwd=2)
?ToothGrowth
ggplot(data=ToothGrowth,aes(x=as.factor(dose),y=len,fill=supp))+geom_boxplot()+ggtitle("Dose versus the lenght in various delivery methods")+xlab("Dose")+ylab("length of odontoblasts")
library("ggplot2")
library("dplyr")
ggplot(data=ToothGrowth,aes(x=as.factor(dose),y=len,fill=supp))+geom_boxplot()+ggtitle("Dose versus the lenght in various delivery methods")+xlab("Dose")+ylab("length of odontoblasts")
t.test(len~supp,data=ToothGrowth)
knitr::opts_chunk$set(echo = TRUE)
head(ToothGrowth)
library("ggplot2")
t.test(len~dose,data=filter(ToothGrowth,dose ==0.5 | dose ==1))
t.test(len~dose,data=ToothGrowth[ToothGrowth$dose ==0.5 | ToothGrowth$dose ==1,])
t.test(len~dose,data=filter(ToothGrowth,dose ==1 | dose ==2))
t.test(len~dose,data=ToothGrowth[ToothGrowth$dose ==0.5 | ToothGrowth$dose ==1,])
t.test(len~dose,data=ToothGrowth[ToothGrowth$dose ==1 | ToothGrowth$dose ==2,])
library("MASS")
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
download.file("https://dl.dropboxusercontent.com/u/7710864/data/ravensData.rda"
, destfile="./data/ravensData.rda",method="curl")
library("MASS")
summary(shuttle)
fit<-glm(shuttle$use ~ shuttle$wind,family = "binomial")
summary(fit)
fit$coefficients
fit$coef[1,1]
fit$coef[1,]
fit$coef[1]
fit$coef[2]
shuttle$usebin <- as.numeric(shuttle$use == "auto") # create a binary variable
fit <- glm(usebin ~ factor(wind) - 1, family = "binomial", data = shuttle)
fit2 <- glm(usebin ~ factor(wind) - 1, family = "binomial", data = shuttle)
fit<-glm(shuttle$use ~ shuttle$wind,family = "binomial")
summary(fit)
summary(fit2)
fit2 <- glm(usebin ~ wind - 1, family = "binomial", data = shuttle)
summary(fit2)
fit2$coefficients[1,1]
fit2$coefficients[1]
fit2$coefficients[2]
exp(fit2$coefficients[1])/exp(fit2$coefficients[2])
fit2 <- glm(usebin ~ wind + magn - 1, family = "binomial", data = shuttle)
summary(fit2)
exp(fit2$coefficients[1])/exp(fit2$coefficients[2])
fit5 <- glm(count ~ factor(spray) + offset(log(rep(sum(count), length(count)))),family = "poisson", data = InsectSprays)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
fit <- lm(y ~ x + z)
z <- (x > 0) * x
fit <- lm(y ~ x + z)
summary(fit)
fit$coef
-1.0241584+2.0372258
fit5 <- glm(count ~ factor(spray) + offset(count),family = "poisson", data = InsectSprays)
fit6 <- glm(count ~ factor(spray) + offset(log(10)+count),family = "poisson", data = InsectSprays)
summary(fit5)
summary(fit6)
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
library(caret); library(kernlab); data(spam)
install.packages("caret")
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
3451/(3451+58)
dim(testing)
3451/(3451+1150)
createDataPartition?
createDataPartition
()
?createDataPartition
set.seed(32343)
modelFit <- train(type ~.,data=training, method="glm")
install.packages("e1071")
set.seed(32343)
modelFit <- train(type ~.,data=training, method="glm")
modelFit
dim(testing)
modelFit <- train(type ~.,data=training, method="glm")
modelFit$finalModel
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
set.seed(32323)
folds <- createFolds(y=spam$type,k=10,
list=TRUE,returnTrain=TRUE)
sapply(folds,length)
folds[[1]][1:10]
set.seed(32323)
folds <- createFolds(y=spam$type,k=10,
list=TRUE,returnTrain=TRUE)
sapply(folds,length)
folds[[1]]
set.seed(32323)
folds <- createFolds(y=spam$type,k=10,
list=TRUE,returnTrain=TRUE)
sapply(folds,length)
folds
set.seed(32323)
folds <- createFolds(y=spam$type,k=10,
list=TRUE,returnTrain=TRUE)
sapply(folds,length)
folds
set.seed(32323)
folds <- createFolds(y=spam$type,k=10,
list=TRUE,returnTrain=TRUE)
sapply(folds,length)
set.seed(32323)
folds <- createFolds(y=spam$type,k=10,
list=TRUE,returnTrain=TRUE)
#sapply(folds,length)
folds[[1]][1:50]
folds[[2]][1:50]
set.seed(32323)
folds <- createFolds(y=spam$type,k=10,
list=TRUE,returnTrain=TRUE)
#sapply(folds,length)
folds[[1]][1:50]
folds[[3]][1:50]
set.seed(32323)
folds <- createFolds(y=spam$type,k=10,
list=TRUE,returnTrain=TRUE)
#sapply(folds,length)
folds[[1]][1:50]
folds[[7]][1:50]
set.seed(32323)
folds <- createFolds(y=spam$type,k=10,
list=TRUE,returnTrain=TRUE)
sapply(folds,length)
length(spam)
set.seed(32323)
folds <- createFolds(y=spam$type,k=10,
list=TRUE,returnTrain=TRUE)
sapply(folds,length)
dim(spam)
set.seed(32323)
folds <- createFolds(y=spam$type,k=10,
list=TRUE,returnTrain=FALSE)
sapply(folds,length)
dim(spam)
460/4601
set.seed(32323)
folds <- createFolds(y=spam$type,k=10,
list=TRUE,returnTrain=TRUE)
sapply(folds,length)
dim(spam)
set.seed(32323)
tme <- 1:1000
folds <- createTimeSlices(y=tme,initialWindow=20,
horizon=10)
names(folds)
folds$train[[1]]
folds$test[[1]]
set.seed(32323)
tme <- 1:1000
folds <- createTimeSlices(y=tme,initialWindow=20,
horizon=10)
names(folds)
folds$train[[2]]
folds$test[[1]]
set.seed(32323)
tme <- 1:1000
folds <- createTimeSlices(y=tme,initialWindow=20,
horizon=10)
names(folds)
folds$train[[1]]
folds$test[[1]]
createTimeSlices(1:15, 5, 3)
set.seed(32323)
folds <- createFolds(y=spam$type,k=10,
list=TRUE,returnTrain=FALSE)
sapply(folds,length)
folds[[1]][1:10]
set.seed(32323)
folds <- createFolds(y=spam$type,k=10,
list=TRUE,returnTrain=FALSE)
sapply(folds,length)
folds[[2]][1:10]
args(geom_smooth)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
?melt
library("dplyr")
?dcast
library("reshape2")
x<-dcast(data = mixtures,value.var =CompressiveStrength )
a <- array(c(1:23, NA), c(2,3,4))
a
melt(a)
melt(mixtures)
melt(mixtures,id.vars = Superplasticizer)
View(mixtures)
melt(mixtures,id.vars = "Superplasticizer")
x<-melt(mixtures,id.vars = "Superplasticizer")
x<-melt(training,id.vars = "Superplasticizer")
?cut2
??cut2
install.packages(Hmisc)
install.packages("Hmisc")
library("Hmisc")
x$Superplasticizer<-cut2(x$Superplasticizer,g=4)
x
x<-melt(training,id.vars = "Superplasticizer")
x$newSuperplasticizer<-cut2(x$Superplasticizer,g=4)
y=1:length(x)
y2=1:length(x)
ggplot(data = x,aes(x=factor(newSuperplasticizer),y=y2)+geom_boxplot()+facet_grid(variable ~ .)
)
ggplot(data = x,aes(x=factor(newSuperplasticizer),y=y2))+geom_boxplot()+facet_grid(variable ~ .)
length(y2)
length(x)
y2=1:nrow(x)
length(y2)
ggplot(data = x,aes(x=factor(newSuperplasticizer),y=y2))+geom_boxplot()+facet_grid(variable ~ .)
ggplot(data = x[x$variable=="Age",],aes(x=factor(newSuperplasticizer),y=y2))+geom_boxplot()+facet_grid(variable ~ .)
y2=1:nrow(x[x$variable=="Age",])
ggplot(data = x[x$variable=="Age",],aes(x=factor(newSuperplasticizer),y=y2))+geom_boxplot()+facet_grid(variable ~ .)
y2=1:nrow(x)
ggplot(data = x,aes(x=factor(newSuperplasticizer),y=y2))+geom_boxplot()+facet_grid(variable ~ .)+ggsave(test,width = 30,height = 30)
ggplot(data = x,aes(x=factor(newSuperplasticizer),y=y2))+geom_boxplot()+facet_grid(variable ~ .)+ggsave("test.png",width = 30,height = 30)
ggplot(data = x,aes(x=factor(newSuperplasticizer),y=y2))+geom_boxplot()+facet_grid( .~variable)
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
library(ISLR); library(ggplot2); library(caret);
install.packages("ISLR")
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
M <- abs(cor(training[,-58]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
names(spam)[c(34,32)]
plot(spam[,34],spam[,32])
X <- 0.71*training$num415 + 0.71*training$num857
Y <- 0.71*training$num415 - 0.71*training$num857
plot(X,Y)
smallSpam <- spam[,c(34,32)]
prComp <- prcomp(smallSpam)
plot(prComp$x[,1],prComp$x[,2])
prComp$rotation
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training=training[,grep("^IL|diagnosis",names(training))]
head(training)
training[,-1]
prcomp(training[,-1])
xprc=prcomp(training[,-1])
xprc$scale
xprc$sdev
preProcess(training[,-1],method="pca",pcaComp=2)
preProcess(training[,-1],method="pca")
preProcess(training[,-1],method="pca",pcaComp = 9)
s=preProcess(training[,-1],method="pca",pcaComp = 9)
s$std
s$pcaComp
s$bc
s$yj
s$et
s$rotation
s$thresh
s=preProcess(training[,-1],method="pca",pcaComp = 8)
s$thresh
s=preProcess(training[,-1],method="pca",pcaComp = 2)
s$thresh
s$numComp
s$ica
s$invHyperbolicSine
s=preProcess(training[,-1],method="pca")
s
modelFit <- train(training$diagnosis ~ .,method="glm",data=pca)
pca=preProcess(training[,-1],method="pca",thresh = 0.9)
modelFit <- train(training$diagnosis ~ .,method="glm",data=pca)
newTrain=predict(pca,training[,-1])
newTraining=predict(pca,training[,-1])
modelFit <- train(training$diagnosis ~ .,method="glm",data=newTraining)
pca=preProcess(training[,-1],method="pca",thresh = 0.8)
newTraining=predict(pca,training[,-1])
modelFit <- train(training$diagnosis ~ .,method="glm",data=newTraining)
newTraining
pca=preProcess(training[,-1],method="pca",thresh = 0.8)
newTraining=predict(pca,training[,-1])
newTraining
modelFit <- train(training$diagnosis ~ .,method="glm",data=newTraining)
View(training)
pca=preProcess(training[,-1],method="pca",thresh = 0.8)
newTraining=predict(pca,training[,-1])
modelFit <- train(training$diagnosis ~ .,method="glm",data=newTraining)
pca=preProcess(training[,-1],method="pca",thresh = 0.8)
pcaTraining=predict(pca,training[,-1])
modelFit <- train(training$diagnosis ~ .,method="glm",data=pcaTraining)
modelFit <- train(training$diagnosis ~ .,method="glm",data=pcaTraining)
train(training$diagnosis ~ .,method="glm",data=pcaTraining)
train(training$diagnosis ~ PC1,method="glm",data=pcaTraining)
pca=preProcess(training[,-1],method="pca",thresh = 0.8)
pcaTraining=predict(pca,training[,-1])
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC[,],method="glm")
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC[,1],method="glm")
pca=preProcess(training[,-1],method="pca",thresh = 0.8)
pcaTraining=predict(pca,training[,-1])
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis ~ . ,data=trainPC[,1],method="glm")
preProc <- preProcess(log10(training[,-58]+1),method="pca",pcaComp=2)
preProc <- preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)
spamPC <- predict(preProc,log10(spam[,-58]+1))
plot(spamPC[,1],spamPC[,2],col=typeColor)
typeColor <- ((spam$type=="spam")*1 + 1)
prComp <- prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1],prComp$x[,2],col=typeColor,xlab="PC1",ylab="PC2")
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
M <- abs(cor(training[,-58]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
names(spam)[c(34,32)]
plot(spam[,34],spam[,32])
X <- 0.71*training$num415 + 0.71*training$num857
Y <- 0.71*training$num415 - 0.71*training$num857
plot(X,Y)
smallSpam <- spam[,c(34,32)]
prComp <- prcomp(smallSpam)
plot(prComp$x[,1],prComp$x[,2])
prComp$rotation
typeColor <- ((spam$type=="spam")*1 + 1)
prComp <- prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1],prComp$x[,2],col=typeColor,xlab="PC1",ylab="PC2")
preProc <- preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)
spamPC <- predict(preProc,log10(spam[,-58]+1))
plot(spamPC[,1],spamPC[,2],col=typeColor)
preProc <- preProcess(log10(training[,-58]+1),method="pca",pcaComp=2)
trainPC <- predict(preProc,log10(training[,-58]+1))
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
data("mtcars")
cor(mtcars$am,mtcars)
cor(mtcars$mpg,mtcars)
carsdata=mtcars
library(ggplot2)
ggplot(data = carsdata,aes(x=mpg,y=wt,size=cyl))+geom_point()
ggplot(data = carsdata,aes(x=mpg,y=wt,fill=cyl))+geom_point()
ggplot(data = carsdata,aes(x=y,x=wt,fill=cyl))+geom_point()
ggplot(data = carsdata,aes(y=mpg,x=wt,fill=cyl))+geom_point()
ggplot(data = carsdata,aes(y=mpg,x=wt,size=cyl))+geom_point()
ggplot(data = carsdata,aes(y=mpg,x=wt,fill=disp,size=cyl))+geom_point()
ggplot(data = carsdata,aes(y=mpg,x=wt))+geom_point(fill=cyl)
ggplot(data = carsdata,aes(y=mpg,x=wt))+geom_point(aes(fill=cyl))
ggplot(data = carsdata,aes(y=mpg,x=wt))+geom_point(aes(col=cyl))
ggplot(data = carsdata,aes(y=mpg,x=wt))+geom_point(aes(col=disp))
ggplot(data = carsdata,aes(y=mpg,x=wt))+geom_point(aes(size=cyl,col=disp))
ggplot(data = carsdata,aes(y=mpg,x=wt))+geom_point(aes(size=disp,col=cyl))
pairs(carsdata)
data("mtcars")
#assign character values to am column so it doesn't affect the regression models and be more readable
carsdata=mtcars
carsdata$am<-ifelse(mtcars$am==1,"manual","auto")
data("mtcars")
#assign character values to am column so it doesn't affect the regression models and be more readable
carsdata=mtcars
carsdata$am<-ifelse(mtcars$am==1,"manual","auto")
data("mtcars")
#assign character values to am column so it doesn't affect the regression models and be more readable
carsdata=mtcars
carsdata$am<-ifelse(mtcars$am==1,"manual","auto")
carsdata$gear<-as.factor(carsdata$gear)
carsdata$cyl<-as.factor(carsdata$cyl)
carsdata$drat<-as.factor(carsdata$drat)
pairs(carsdata)
pairs(mtcars)
ggplot(data = mtcars,aes(y=mpg,x=wt))+geom_point(aes(size=disp,col=cyl))
data("mtcars")
carsdata=mtcars
#assign character values to am column so it doesn't affect the regression models and be more readable
carsdata$am<-ifelse(mtcars$am==1,"manual","auto")
carsdata$gear<-as.factor(carsdata$gear)
carsdata$cyl<-as.factor(carsdata$cyl)
carsdata$drat<-as.factor(carsdata$drat)
wtModel<-lm(mpg~am+wt,data = carsdata)
anova(amModel,wtModel)
amModel<-lm(mpg~ am,data=carsdata)
summary(amModel)
cor(mtcars$mpg,mtcars)
wtModel<-lm(mpg~am+wt,data = carsdata)
anova(amModel,wtModel)
wtModel<-lm(mpg~am+wt+cyl,data = carsdata)
anova(amModel,wtModel)
wtModel<-lm(mpg~am+wt+cyl+disp,data = carsdata)
anova(amModel,wtModel)
wtModel<-lm(mpg~am+wt+cyl+disp+dart,data = carsdata)
wtModel<-lm(mpg~am+wt+cyl+disp+drat,data = carsdata)
anova(amModel,wtModel)
wtModel<-lm(mpg~am+wt+cyl+disp+drat,data = carsdata)
anova(amModel,wtModel)
predict(wtModel,carsdata)
View(carsdata)
data("mtcars")
carsdata=mtcars
#assign character values to am column so it doesn't affect the regression models and be more readable
carsdata$am<-ifelse(mtcars$am==1,"manual","auto")
carsdata$gear<-as.factor(carsdata$gear)
carsdata$cyl<-as.factor(carsdata$cyl)
wtModel<-lm(mpg~am+wt+cyl+disp+drat,data = carsdata)
anova(amModel,wtModel)
predict(wtModel,carsdata)
cor(mtcars$mpg,mtcars)
?mtcars
pairs(mtcars)
ggplot(data = mtcars,aes(y=mpg,x=drat))+geom_point()
wtModel<-lm(mpg~am+wt,data = carsdata)
anova(amModel,wtModel)
predict(wtModel,carsdata)
plot(wtModel)
plot(wtModel)
fullModel<-lm(mpg~ am+cyl+disp+wt,data=mtcars)
summary(fullModel)
fullModel2<-lm(mpg~ .,data=mtcars)
anova(fullModel,fullModel2)
anova(wtModel,fullModel2)
wtModel<-lm(mpg~am+wt,data = carsdata)
data("mtcars")
carsdata=mtcars
#assign character values to am column so it doesn't affect the regression models and be more readable
carsdata$am<-ifelse(mtcars$am==1,"manual","auto")
carsdata$gear<-as.factor(carsdata$gear)
carsdata$cyl<-as.factor(carsdata$cyl)
t.test(mpg~am,data = carsdata)
amModel<-lm(mpg~ am,data=carsdata)
summary(amModel)
cor(mtcars$mpg,mtcars)
cor(mtcars$mpg,mtcars)
wtModel<-lm(mpg~am+wt,data = carsdata)
anova(amModel,wtModel)
fullModel<-lm(mpg~ am+cyl,data=mtcars)
summary(fullModel)
fullModel<-lm(mpg~ am+cyl+disp+wt,data=mtcars)
summary(fullModel)
fullModel<-lm(mpg~ am+cyl+disp+wt,data=mtcars)
summary(fullModel)
fullModel2<-lm(mpg~ .,data=mtcars)
anova(wtModel,fullModel2)
fullModel2<-lm(mpg~ .,data=mtcars)
anova(wtModel,fullModel)
allCorModel<-lm(mpg~ am+cyl+disp+wt,data=mtcars)
anova(wtModel,allCorModel)
allVarModel<-lm(mpg~ .,data=mtcars)
anova(allVarModel,allCorModel)
allVarModel<-lm(mpg~ .,data=mtcars)
anova(allCorModel,allVarModel)
allVarModel<-lm(mpg~ .,data=mtcars)
anova(amModel,allCorModel,allVarModel)
knitr::opts_chunk$set(echo = TRUE,fig.width=3, fig.height=2)
knitr::opts_chunk$set(echo = TRUE)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(caret)
rfmodel<-train(y~.,data = vowel.train,method="rf")
